1) GETTING STARTED
   VS Code install plugin - python
   exit() used to exit python command line, ctrl+l to clear command line
   For knowing more about a thing, go into python shell, dir(NAME) Ex- dir(list), dir(int), dir(str), dir(dict)
   *dir(__builtins__) - for builtin functions like print(), sum(), len(), max(), round(), isinstance(), sorted()
   Also for detailing of these results type help(str.FUNC_NAME)
   list functions - append(Data), remove(Data), clear() - cleares the list, index(Data,fromIndex?,toIndex?), count(Number) to count no of times it came in list
   str functions - upper(), lower(), capitalize(), replace(), startswith(), join() - "-".join(list)
   dict functions - values(), keys(), items()


2) DATA TYPES-
   Types in python are implicit/ automatically defined - str, int, float, bool(True/False)
   List(Array of different types) - Store multiple objects. 
   Range - for creating list of a particular range. Ex - list(range(1,10,2)) = [1,3,5,7,9]
   Dictionary - key value - {"Marry":10.4}
   Tuple - Like a list but inside () - (10,20,30). Used for not changing values.
   Tuple are immutable while List is mutable by append()
   Types can be checked by type(value) or isinstance(value,toCheck)
   Conversions-
   Tuple to List - list((20,10,30))
   List to Tuple - tuple([1,2,3])
   List to Dictionary - dict( [["",""],["",""]])


3) FUNCTIONS-
   def funcName(parameter):
   ----functionBody after indentation
   ----return
   If no return statement then function returns 'None' implicitly. print() will also return None, so we must return something
   Conditional 'if' 'else' 'elif' - Can be used with 'and' and 'or'

   Keyword arguments are used to pass selected value in any order Ex - funcName(b=5, a =6) to def funcName(a,b=5)
   Note that Default argument cannot be before non default argument in function definition
   funcName(*args) - like var arg, multiple parameters. Creates and Returns a tuple - funcName(1,2,3,4,5) - return tuple
   funcName(**kargs) - keyword arguments - funcName(a=3,b=4) - returns dictionary


4) INPUT-
   input("Enter temperature") and store in a variable, it takes string
   We can typecast using float(input(""))
   Formatting string - "Hello %s" % var_name. %s will be replaced by var_name. OR in python3.6 - f"Hello {var_name}"
                        Multiple formatting case - "Hello %s %s" % (var1, var2). OR f"Hello {name} {surname}"


5) LOOPS-
   for temp in temps:
       print(round(temp))
   while a>1:
       print("Hello")
   While loops can use break nd continue

6) LIST COMPREHENSIONS - 
   We can perform operation on list by using [temp/10 for temp in temps if temp>50] in one line
   For elif [temp/10 if temp>50 else 0 for temp in temps], condiition in last

   
7) FILE PROCESSING-
   Reading - myfile = open("pathOfFile.txt"), print(myfile.read()) OR open("pathOfFile.txt","r")
   Closing - myfile.close()
   
   OR using with (Better) auto closes
   with open("pathOfFile.txt") as myfile:
   ----content = myfile.read()

   Writing - with open("pathOfFile.txt","w") as myfile:
   ----myfile.write("Data \n Data")
   ----myfile.write("\n Data")

   Appending data to file - with open("pathOfFile.txt","a") as myfile:
                            ----myfile.write("Data")
                            Allows only writing
                            For reading at same time, use "a+"
                            Use myfile.seek(0) to put cursor to start of file since append starts cursor from last

   Note - 'x' does not creates a file if it exists for Writing
          'a' for appending


8) MODULES/ Bunch of modules/ packages-
   import sys
   sys.builtin_module_names -   This will give all module names. Ex - time, os
   sys.prefix               -   Directory path where these are stored

   time is a builtin module written in C
   os module is standard python module find in lib> python3.7> .py files as modules 
   we can check a file path by os.path.exists('path')   

   import time
   dir(time)    -   Ex- time.sleep(time)

   Third party modules - like for csv
   pip - to install a third party library. Ex- pip3 install pandas - data analytics library
   data = pandas.read_csv("path of file")
   print(data.mean()) or data.mean()["st1"]

9) PANDAS WITH CSV EXCEL and JSON
   









   Lec - 90
   